// Code generated by MockGen. DO NOT EDIT.
// Source: movie.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/awize/movies-searcher/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMovieUseCase is a mock of MovieUseCase interface.
type MockMovieUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockMovieUseCaseMockRecorder
}

// MockMovieUseCaseMockRecorder is the mock recorder for MockMovieUseCase.
type MockMovieUseCaseMockRecorder struct {
	mock *MockMovieUseCase
}

// NewMockMovieUseCase creates a new mock instance.
func NewMockMovieUseCase(ctrl *gomock.Controller) *MockMovieUseCase {
	mock := &MockMovieUseCase{ctrl: ctrl}
	mock.recorder = &MockMovieUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieUseCase) EXPECT() *MockMovieUseCaseMockRecorder {
	return m.recorder
}

// GetMovie mocks base method.
func (m *MockMovieUseCase) GetMovie(id int) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovie", id)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovie indicates an expected call of GetMovie.
func (mr *MockMovieUseCaseMockRecorder) GetMovie(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovie", reflect.TypeOf((*MockMovieUseCase)(nil).GetMovie), id)
}

// GetMovies mocks base method.
func (m *MockMovieUseCase) GetMovies() ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies")
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockMovieUseCaseMockRecorder) GetMovies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockMovieUseCase)(nil).GetMovies))
}

// SearchMovies mocks base method.
func (m *MockMovieUseCase) SearchMovies(query string, page int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", query, page)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockMovieUseCaseMockRecorder) SearchMovies(query, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockMovieUseCase)(nil).SearchMovies), query, page)
}
